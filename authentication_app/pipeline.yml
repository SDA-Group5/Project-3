# azure-pipelines.yml

trigger:
- '*' # This wildcard means any branch
variables:
  # --- Docker Build & Push Variables ---
  dockerRegistryServiceConnection: 'dockerhub_connection' # Your ADO Service Connection for Docker Hub
  dockerhubUsername: 'mtery01'                        # Your Docker Hub username

  # UI App specific
  uiImageName: 'ui-p3'
  uiProjectRoot: 'frontend'                  # Relative path to UI app's source from repo root
  uiDockerfile: '$(System.DefaultWorkingDirectory)/$(uiProjectRoot)/Dockerfile' # Full path to UI Dockerfile

  # API App specific
  apiImageName: 'backend-p3'
  apiProjectRoot: 'backend'                  # Relative path to API app's source
  apiDockerfile: '$(System.DefaultWorkingDirectory)/$(apiProjectRoot)/Dockerfile' # Full path to API Dockerfile

  # Common Tag for this build
  imageTag: '$(Build.BuildId)'                         # Unique tag for each build (e.g., pipeline run number)

  # --- Variables for Kubernetes Deployment Stage---
  kustomizeRootPath: 'kube'       # Path to your Kustomize manifests
  kubernetesServiceConnection: 'kube' # ADO Service Connection for AKS
  kubernetesNamespace: 'a2'                   # Target namespace in AKS

stages:
- stage: Build_Docker_Images
  displayName: 'Build and Push Docker Images'
  jobs:
    - job: Build_UI
      displayName: 'Build and Push UI Image'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: Docker@2
          displayName: 'Build and Push UI App Image'
          inputs:
            containerRegistry: '$(dockerRegistryServiceConnection)'
            repository: '$(dockerhubUsername)/$(uiImageName)'
            command: 'buildAndPush'
            Dockerfile: '$(uiDockerfile)'
            buildContext: '$(System.DefaultWorkingDirectory)/$(uiProjectRoot)'
            tags: |
              latest
              $(imageTag)
            arguments: --no-cache  # Optional: Use --no-cache to ensure a fresh build

    - job: Build_API
      displayName: 'Build and Push API Image'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: Docker@2
          displayName: 'Build and Push API App Image'
          inputs:
            containerRegistry: '$(dockerRegistryServiceConnection)'
            repository: '$(dockerhubUsername)/$(apiImageName)'
            command: 'buildAndPush'
            Dockerfile: '$(apiDockerfile)'
            buildContext: '$(System.DefaultWorkingDirectory)/$(apiProjectRoot)'
            tags: |
              latest
              $(imageTag)
            arguments: --no-cache  # Optional: Use --no-cache to ensure a fresh build


#### Next Stage: Deploy to Kubernetes (AKS)####
# This stage will come after the Build_Docker_Images stage
- stage: Deploy_To_AKS
  displayName: 'Deploy Application to AKS (Namespace: $(kubernetesNamespace))'
  dependsOn: Build_Docker_Images   # This stage depends on the Build stage
  condition: succeeded()           # Only run if the Build stage was successful
  jobs:
  - job: Deploy_Application
    displayName: 'Deploy Kustomized Manifests to AKS'
    pool:
      vmImage: 'ubuntu-latest'   #kubectl & kustomize usually pre-installed
    steps:
    # Step 1: Verify prerequisite tools 
    - script: |
        echo "Verifying tool versions..."
        kubectl version --client
        kustomize version 
      displayName: 'Verify Kubectl and Kustomize'

    # Step 2: Configure Kubectl to connect to your AKS cluster
    - task: Kubernetes@1
      displayName: 'Set Kubernetes Context using Service Connection'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: '$(kubernetesServiceConnection)' 
        command: 'login' # This command configures kubectl for the specified service connection

    # Step 3: Update image tags in your Kustomize configuration
    # These commands modify the kustomization files in the agent's checked-out local directory.
    - script: |
        echo "Updating Kustomize image tags in $(System.DefaultWorkingDirectory)/$(kustomizeRootPath)"
        # Navigate to the root of your Kustomize configuration
        cd $(System.DefaultWorkingDirectory)/$(kustomizeRootPath)

        # ===== pass testing 19/5 =====
        # Define old image names (constants)
        OLD_UI_IMAGE="mtery01/frontend-trainer-portal:latest"
        OLD_API_IMAGE="mtery01/backend-trainer-portal:latest"
        
        # Construct new image names from pipeline variables
        # Note: Using the env vars directly (no need to export)
        NEW_UI_IMAGE="${dockerhubUsername}/${uiImageName}:${imageTag}"
        NEW_API_IMAGE="${dockerhubUsername}/${apiImageName}:${imageTag}"

        echo "Current directory: $(pwd)"
        echo "Listing files in Kustomize root (for debugging):"
        ls -la

        # =====  pass testing 19/5 =====
        echo "Setting UI image from '${OLD_UI_IMAGE}' to: ${NEW_UI_IMAGE}"
        kustomize edit set image "${OLD_UI_IMAGE}=${NEW_UI_IMAGE}"

        echo "Setting API image from '${OLD_API_IMAGE}' to: ${NEW_API_IMAGE}"
        kustomize edit set image "${OLD_API_IMAGE}=${NEW_API_IMAGE}"

        echo "Kustomize image tags updated."
        echo "Verifying Kustomize build output:"
        kustomize build .

        echo "Replacing:"
        echo "- ${OLD_UI_IMAGE} → ${NEW_UI_IMAGE}"
        echo "- ${OLD_API_IMAGE} → ${NEW_API_IMAGE}"
      displayName: 'Update Kustomize Image Tags for UI and API'
      env:
        dockerhubUsername: $(dockerhubUsername)
        uiImageName: $(uiImageName)
        apiImageName: $(apiImageName)
        imageTag: $(imageTag)
    - script: |
        echo "Current pod images:"
        kubectl get pods -n $(kubernetesNamespace) -o jsonpath='{range .items[*]}{"\n"}{.metadata.name}{":\t"}{.spec.containers[0].image}{end}'
      displayName: 'Verify Deployed Images'

    # Step 4: Apply the Kustomize configuration to your AKS cluster
    # This command deploys the manifests of the app to your AKS cluster
    - task: Kubernetes@1
      displayName: 'Deploy Kustomized Manifests to AKS'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: '$(kubernetesServiceConnection)' 
        command: 'apply'
        arguments: '-k $(System.DefaultWorkingDirectory)/$(kustomizeRootPath)'
        namespace: '$(kubernetesNamespace)' # belongs to service(api/ui) namespace 


    